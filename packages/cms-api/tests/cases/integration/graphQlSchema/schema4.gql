type FieldMeta {
  readable: Boolean
  updatable: Boolean
}

type Info {
  description: String
}

type Mutation {
  createRoot(data: RootCreateInput!): Root!
  deleteRoot(where: RootUniqueWhere!): Root
  updateRoot(where: RootUniqueWhere!, data: RootUpdateInput!): Root
  createOneHasManyEntity(data: OneHasManyEntityCreateInput!): OneHasManyEntity!
  updateOneHasManyEntity(where: OneHasManyEntityUniqueWhere!, data: OneHasManyEntityUpdateInput!): OneHasManyEntity
  generateUploadUrl(contentType: String!): SignedUpload!
}

type OneHasManyEntity {
  _meta: OneHasManyEntityMeta
  id: UUID!
  a: String
  r2(where: RootWhere): Root
}

input OneHasManyEntityCreateInput {
  a: String
  r2: OneHasManyEntityCreateR2EntityRelationInput
  _create: Boolean
}

input OneHasManyEntityCreateR2EntityRelationInput {
  connect: RootUniqueWhere
  create: RootWithoutRCreateInput
}

type OneHasManyEntityMeta {
  id: FieldMeta
  a: FieldMeta
  r2: FieldMeta
}

input OneHasManyEntityOrderBy {
  id: OrderDirection
  a: OrderDirection
  r2: RootOrderBy
}

input OneHasManyEntityUniqueWhere {
  id: UUID
}

input OneHasManyEntityUpdateInput {
  a: String
  r2: OneHasManyEntityUpdateR2EntityRelationInput
  _update: Boolean
}

input OneHasManyEntityUpdateR2EntityRelationInput {
  create: RootWithoutRCreateInput
  update: RootWithoutRUpdateInput
  upsert: OneHasManyEntityUpsertR2RelationInput
  connect: RootUniqueWhere
  disconnect: Boolean
  delete: Boolean
}

input OneHasManyEntityUpsertR2RelationInput {
  update: RootWithoutRUpdateInput
  create: RootWithoutRCreateInput
}

input OneHasManyEntityWhere {
  id: UUIDCondition
  a: StringCondition
  r2: RootWhere
  and: [OneHasManyEntityWhere!]
  or: [OneHasManyEntityWhere!]
  not: OneHasManyEntityWhere
}

input OneHasManyEntityWithoutR2CreateInput {
  a: String
  _create: Boolean
}

input OneHasManyEntityWithoutR2UpdateInput {
  a: String
  _update: Boolean
}

enum OrderDirection {
  asc
  desc
}

type Query {
  getRoot(where: RootUniqueWhere!): Root
  listRoot(where: RootWhere, orderBy: [RootOrderBy!], offset: Int, limit: Int): [Root]
  getOneHasManyEntity(where: OneHasManyEntityUniqueWhere!): OneHasManyEntity
  listOneHasManyEntity(where: OneHasManyEntityWhere, orderBy: [OneHasManyEntityOrderBy!], offset: Int, limit: Int): [OneHasManyEntity]
  _info: Info
}

type Root {
  _meta: RootMeta
  id: UUID!
  r(where: OneHasManyEntityWhere, orderBy: [OneHasManyEntityOrderBy!], offset: Int, limit: Int): [OneHasManyEntity!]
}

input RootCreateInput {
  r: [RootCreateREntityRelationInput!]
  _create: Boolean
}

input RootCreateREntityRelationInput {
  connect: OneHasManyEntityUniqueWhere
  create: OneHasManyEntityWithoutR2CreateInput
}

type RootMeta {
  id: FieldMeta
  r: FieldMeta
}

input RootOrderBy {
  id: OrderDirection
}

input RootUniqueWhere {
  id: UUID
}

input RootUpdateInput {
  r: [RootUpdateREntityRelationInput!]
  _update: Boolean
}

input RootUpdateREntityRelationInput {
  create: OneHasManyEntityWithoutR2CreateInput
  update: RootUpdateRRelationInput
  upsert: RootUpsertRRelationInput
  connect: OneHasManyEntityUniqueWhere
  disconnect: OneHasManyEntityUniqueWhere
}

input RootUpdateRRelationInput {
  where: OneHasManyEntityUniqueWhere
  data: OneHasManyEntityWithoutR2UpdateInput
}

input RootUpsertRRelationInput {
  where: OneHasManyEntityUniqueWhere
  update: OneHasManyEntityWithoutR2UpdateInput
  create: OneHasManyEntityWithoutR2CreateInput
}

input RootWhere {
  id: UUIDCondition
  r: OneHasManyEntityWhere
  and: [RootWhere!]
  or: [RootWhere!]
  not: RootWhere
}

input RootWithoutRCreateInput {
  _create: Boolean
}

input RootWithoutRUpdateInput {
  _update: Boolean
}

type SignedUpload {
  url: String!
}

input StringCondition {
  and: [StringCondition!]
  or: [StringCondition!]
  not: StringCondition
  eq: String
  null: Boolean
  notEq: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

scalar UUID

input UUIDCondition {
  and: [UUIDCondition!]
  or: [UUIDCondition!]
  not: UUIDCondition
  eq: UUID
  null: Boolean
  notEq: UUID
  in: [UUID!]
  notIn: [UUID!]
  lt: UUID
  lte: UUID
  gt: UUID
  gte: UUID
}
