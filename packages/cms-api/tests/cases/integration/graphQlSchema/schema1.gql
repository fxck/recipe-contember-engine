type Author {
  _meta: AuthorMeta
  id: UUID!
  name: String
  posts(where: PostWhere): [Post!]
}

input AuthorCreateInput {
  name: String
  posts: [AuthorCreatePostsEntityRelationInput!]
}

input AuthorCreatePostsEntityRelationInput {
  connect: PostUniqueWhere
  create: PostWithoutAuthorCreateInput
}

type AuthorMeta {
  id: FieldMeta
  name: FieldMeta
  posts: FieldMeta
}

input AuthorUniqueWhere {
  id: UUID
}

input AuthorUpdateInput {
  name: String
  posts: [AuthorUpdatePostsEntityRelationInput!]
}

input AuthorUpdatePostsEntityRelationInput {
  create: PostWithoutAuthorCreateInput
  update: AuthorUpdatePostsRelationInput
  upsert: AuthorUpsertPostsRelationInput
  delete: PostUniqueWhere
  connect: PostUniqueWhere
  disconnect: PostUniqueWhere
}

input AuthorUpdatePostsRelationInput {
  where: PostUniqueWhere
  data: PostWithoutAuthorUpdateInput
}

input AuthorUpsertPostsRelationInput {
  where: PostUniqueWhere
  update: PostWithoutAuthorUpdateInput
  create: PostWithoutAuthorCreateInput
}

input AuthorWhere {
  id: UUIDCondition
  name: StringCondition
  posts: PostWhere
  and: [AuthorWhere!]
  or: [AuthorWhere!]
  not: AuthorWhere
}

input AuthorWithoutPostsCreateInput {
  name: String
}

input AuthorWithoutPostsUpdateInput {
  name: String
}

type Category {
  _meta: CategoryMeta
  id: UUID!
  name: String
  posts(where: PostWhere): [Post!]
}

input CategoryCreateInput {
  name: String
  posts: [CategoryCreatePostsEntityRelationInput!]
}

input CategoryCreatePostsEntityRelationInput {
  connect: PostUniqueWhere
  create: PostWithoutCategoriesCreateInput
}

type CategoryMeta {
  id: FieldMeta
  name: FieldMeta
  posts: FieldMeta
}

input CategoryUniqueWhere {
  id: UUID
}

input CategoryUpdateInput {
  name: String
  posts: [CategoryUpdatePostsEntityRelationInput!]
}

input CategoryUpdatePostsEntityRelationInput {
  create: PostWithoutCategoriesCreateInput
  update: CategoryUpdatePostsRelationInput
  upsert: CategoryUpsertPostsRelationInput
  delete: PostUniqueWhere
  connect: PostUniqueWhere
  disconnect: PostUniqueWhere
}

input CategoryUpdatePostsRelationInput {
  where: PostUniqueWhere
  data: PostWithoutCategoriesUpdateInput
}

input CategoryUpsertPostsRelationInput {
  where: PostUniqueWhere
  update: PostWithoutCategoriesUpdateInput
  create: PostWithoutCategoriesCreateInput
}

input CategoryWhere {
  id: UUIDCondition
  name: StringCondition
  posts: PostWhere
  and: [CategoryWhere!]
  or: [CategoryWhere!]
  not: CategoryWhere
}

input CategoryWithoutPostsCreateInput {
  name: String
}

input CategoryWithoutPostsUpdateInput {
  name: String
}

scalar DateTime

input DateTimeCondition {
  and: [DateTimeCondition!]
  or: [DateTimeCondition!]
  not: DateTimeCondition
  eq: DateTime
  null: Boolean
  notEq: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

type FieldMeta {
  readable: Boolean
  updatable: Boolean
}

type Mutation {
  createPost(data: PostCreateInput!): Post!
  deletePost(where: PostUniqueWhere!): Post
  updatePost(where: PostUniqueWhere!, data: PostUpdateInput!): Post
  createPostLocale(data: PostLocaleCreateInput!): PostLocale!
  deletePostLocale(where: PostLocaleUniqueWhere!): PostLocale
  updatePostLocale(where: PostLocaleUniqueWhere!, data: PostLocaleUpdateInput!): PostLocale
  createCategory(data: CategoryCreateInput!): Category!
  deleteCategory(where: CategoryUniqueWhere!): Category
  updateCategory(where: CategoryUniqueWhere!, data: CategoryUpdateInput!): Category
  createAuthor(data: AuthorCreateInput!): Author!
  deleteAuthor(where: AuthorUniqueWhere!): Author
  updateAuthor(where: AuthorUniqueWhere!, data: AuthorUpdateInput!): Author
}

type Post {
  _meta: PostMeta
  author(where: AuthorWhere): Author
  id: UUID!
  publishedAt: DateTime
  locales(where: PostLocaleWhere): [PostLocale!]
  categories(where: CategoryWhere): [Category!]
}

input PostCreateAuthorEntityRelationInput {
  connect: AuthorUniqueWhere
  create: AuthorWithoutPostsCreateInput
}

input PostCreateCategoriesEntityRelationInput {
  connect: CategoryUniqueWhere
  create: CategoryWithoutPostsCreateInput
}

input PostCreateInput {
  author: PostCreateAuthorEntityRelationInput
  publishedAt: DateTime
  locales: [PostCreateLocalesEntityRelationInput!]
  categories: [PostCreateCategoriesEntityRelationInput!]
}

input PostCreateLocalesEntityRelationInput {
  connect: PostLocaleUniqueWhere
  create: PostLocaleWithoutPostCreateInput
}

type PostLocale {
  _meta: PostLocaleMeta
  id: UUID!
  title: String
  Post(where: PostWhere): Post
}

input PostLocaleCreateInput {
  title: String
  Post: PostLocaleCreatePostEntityRelationInput
}

input PostLocaleCreatePostEntityRelationInput {
  connect: PostUniqueWhere
  create: PostWithoutLocalesCreateInput
}

type PostLocaleMeta {
  id: FieldMeta
  title: FieldMeta
  Post: FieldMeta
}

input PostLocaleUniqueWhere {
  id: UUID
}

input PostLocaleUpdateInput {
  title: String
  Post: PostLocaleUpdatePostEntityRelationInput
}

input PostLocaleUpdatePostEntityRelationInput {
  create: PostWithoutLocalesCreateInput
  update: PostWithoutLocalesUpdateInput
  upsert: PostLocaleUpsertPostRelationInput
  connect: PostUniqueWhere
  disconnect: Boolean
  delete: Boolean
}

input PostLocaleUpsertPostRelationInput {
  update: PostWithoutLocalesUpdateInput
  create: PostWithoutLocalesCreateInput
}

input PostLocaleWhere {
  id: UUIDCondition
  title: StringCondition
  Post: PostWhere
  and: [PostLocaleWhere!]
  or: [PostLocaleWhere!]
  not: PostLocaleWhere
}

input PostLocaleWithoutPostCreateInput {
  title: String
}

input PostLocaleWithoutPostUpdateInput {
  title: String
}

type PostMeta {
  author: FieldMeta
  id: FieldMeta
  publishedAt: FieldMeta
  locales: FieldMeta
  categories: FieldMeta
}

input PostUniqueWhere {
  id: UUID
}

input PostUpdateAuthorEntityRelationInput {
  create: AuthorWithoutPostsCreateInput
  update: AuthorWithoutPostsUpdateInput
  upsert: PostUpsertAuthorRelationInput
  connect: AuthorUniqueWhere
  disconnect: Boolean
  delete: Boolean
}

input PostUpdateCategoriesEntityRelationInput {
  create: CategoryWithoutPostsCreateInput
  update: PostUpdateCategoriesRelationInput
  upsert: PostUpsertCategoriesRelationInput
  delete: CategoryUniqueWhere
  connect: CategoryUniqueWhere
  disconnect: CategoryUniqueWhere
}

input PostUpdateCategoriesRelationInput {
  where: CategoryUniqueWhere
  data: CategoryWithoutPostsUpdateInput
}

input PostUpdateInput {
  author: PostUpdateAuthorEntityRelationInput
  publishedAt: DateTime
  locales: [PostUpdateLocalesEntityRelationInput!]
  categories: [PostUpdateCategoriesEntityRelationInput!]
}

input PostUpdateLocalesEntityRelationInput {
  create: PostLocaleWithoutPostCreateInput
  update: PostUpdateLocalesRelationInput
  upsert: PostUpsertLocalesRelationInput
  delete: PostLocaleUniqueWhere
  connect: PostLocaleUniqueWhere
  disconnect: PostLocaleUniqueWhere
}

input PostUpdateLocalesRelationInput {
  where: PostLocaleUniqueWhere
  data: PostLocaleWithoutPostUpdateInput
}

input PostUpsertAuthorRelationInput {
  update: AuthorWithoutPostsUpdateInput
  create: AuthorWithoutPostsCreateInput
}

input PostUpsertCategoriesRelationInput {
  where: CategoryUniqueWhere
  update: CategoryWithoutPostsUpdateInput
  create: CategoryWithoutPostsCreateInput
}

input PostUpsertLocalesRelationInput {
  where: PostLocaleUniqueWhere
  update: PostLocaleWithoutPostUpdateInput
  create: PostLocaleWithoutPostCreateInput
}

input PostWhere {
  author: AuthorWhere
  id: UUIDCondition
  publishedAt: DateTimeCondition
  locales: PostLocaleWhere
  categories: CategoryWhere
  and: [PostWhere!]
  or: [PostWhere!]
  not: PostWhere
}

input PostWithoutAuthorCreateInput {
  publishedAt: DateTime
  locales: [PostCreateLocalesEntityRelationInput!]
  categories: [PostCreateCategoriesEntityRelationInput!]
}

input PostWithoutAuthorUpdateInput {
  publishedAt: DateTime
  locales: [PostUpdateLocalesEntityRelationInput!]
  categories: [PostUpdateCategoriesEntityRelationInput!]
}

input PostWithoutCategoriesCreateInput {
  author: PostCreateAuthorEntityRelationInput
  publishedAt: DateTime
  locales: [PostCreateLocalesEntityRelationInput!]
}

input PostWithoutCategoriesUpdateInput {
  author: PostUpdateAuthorEntityRelationInput
  publishedAt: DateTime
  locales: [PostUpdateLocalesEntityRelationInput!]
}

input PostWithoutLocalesCreateInput {
  author: PostCreateAuthorEntityRelationInput
  publishedAt: DateTime
  categories: [PostCreateCategoriesEntityRelationInput!]
}

input PostWithoutLocalesUpdateInput {
  author: PostUpdateAuthorEntityRelationInput
  publishedAt: DateTime
  categories: [PostUpdateCategoriesEntityRelationInput!]
}

type Query {
  Post(where: PostUniqueWhere!): Post
  Posts(where: PostWhere): [Post]
  PostLocale(where: PostLocaleUniqueWhere!): PostLocale
  PostLocales(where: PostLocaleWhere): [PostLocale]
  Category(where: CategoryUniqueWhere!): Category
  Categorys(where: CategoryWhere): [Category]
  Author(where: AuthorUniqueWhere!): Author
  Authors(where: AuthorWhere): [Author]
}

input StringCondition {
  and: [StringCondition!]
  or: [StringCondition!]
  not: StringCondition
  eq: String
  null: Boolean
  notEq: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

scalar UUID

input UUIDCondition {
  and: [UUIDCondition!]
  or: [UUIDCondition!]
  not: UUIDCondition
  eq: UUID
  null: Boolean
  notEq: UUID
  in: [UUID!]
  notIn: [UUID!]
  lt: UUID
  lte: UUID
  gt: UUID
  gte: UUID
}
