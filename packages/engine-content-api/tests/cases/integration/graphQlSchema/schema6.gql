type _FieldPathFragment {
  field: String!
}

type _IndexPathFragment {
  index: Int!
  alias: String
}

union _PathFragment = _FieldPathFragment | _IndexPathFragment

type _ValidationError {
  path: [_PathFragment!]!
  message: _ValidationMessage!
}

type _ValidationMessage {
  text: String!
}

type _ValidationResult {
  valid: Boolean!
  errors: [_ValidationError!]!
}

type FieldMeta {
  readable: Boolean
  updatable: Boolean
}

type Info {
  description: String
}

type Mutation {
  deleteRoot(by: RootUniqueWhere!): RootDeleteResult!
  updateRoot(by: RootUniqueWhere!, data: RootUpdateInput!): RootUpdateResult!
  deleteOneHasManyEntity(by: OneHasManyEntityUniqueWhere!): OneHasManyEntityDeleteResult!
  updateOneHasManyEntity(by: OneHasManyEntityUniqueWhere!, data: OneHasManyEntityUpdateInput!): OneHasManyEntityUpdateResult!
}

type OneHasManyEntity {
  _meta: OneHasManyEntityMeta
  id: UUID!
  a: String
  r2(filter: RootWhere): Root
}

type OneHasManyEntityDeleteResult {
  ok: Boolean!
  node: OneHasManyEntity
}

type OneHasManyEntityMeta {
  id: FieldMeta
  a: FieldMeta
  r2: FieldMeta
}

input OneHasManyEntityOrderBy {
  id: OrderDirection
  a: OrderDirection
  r2: RootOrderBy
}

input OneHasManyEntityUniqueWhere {
  id: UUID
}

input OneHasManyEntityUpdateInput {
  a: String
  r2: OneHasManyEntityUpdateR2EntityRelationInput
  _update: Boolean
}

input OneHasManyEntityUpdateR2EntityRelationInput {
  update: RootWithoutRUpdateInput
  connect: RootUniqueWhere
  disconnect: Boolean
  delete: Boolean
}

type OneHasManyEntityUpdateResult {
  ok: Boolean!
  node: OneHasManyEntity
  validation: _ValidationResult!
}

input OneHasManyEntityWhere {
  id: UUIDCondition
  a: StringCondition
  r2: RootWhere
  and: [OneHasManyEntityWhere!]
  or: [OneHasManyEntityWhere!]
  not: OneHasManyEntityWhere
}

input OneHasManyEntityWithoutR2UpdateInput {
  a: String
  _update: Boolean
}

enum OrderDirection {
  asc
  desc
}

type Query {
  getRoot(by: RootUniqueWhere!): Root
  listRoot(filter: RootWhere, orderBy: [RootOrderBy!], offset: Int, limit: Int): [Root]
  validateUpdateRoot(by: RootUniqueWhere!, data: RootUpdateInput!): _ValidationResult!
  getOneHasManyEntity(by: OneHasManyEntityUniqueWhere!): OneHasManyEntity
  listOneHasManyEntity(filter: OneHasManyEntityWhere, orderBy: [OneHasManyEntityOrderBy!], offset: Int, limit: Int): [OneHasManyEntity]
  validateUpdateOneHasManyEntity(by: OneHasManyEntityUniqueWhere!, data: OneHasManyEntityUpdateInput!): _ValidationResult!
  _info: Info
}

type Root {
  _meta: RootMeta
  id: UUID!
  r(filter: OneHasManyEntityWhere, orderBy: [OneHasManyEntityOrderBy!], offset: Int, limit: Int): [OneHasManyEntity!]
}

type RootDeleteResult {
  ok: Boolean!
  node: Root
}

type RootMeta {
  id: FieldMeta
  r: FieldMeta
}

input RootOrderBy {
  id: OrderDirection
}

input RootUniqueWhere {
  id: UUID
}

input RootUpdateInput {
  r: [RootUpdateREntityRelationInput!]
  _update: Boolean
}

input RootUpdateREntityRelationInput {
  update: RootUpdateRRelationInput
  connect: OneHasManyEntityUniqueWhere
  disconnect: OneHasManyEntityUniqueWhere
  delete: OneHasManyEntityUniqueWhere
  alias: String
}

type RootUpdateResult {
  ok: Boolean!
  node: Root
  validation: _ValidationResult!
}

input RootUpdateRRelationInput {
  by: OneHasManyEntityUniqueWhere
  data: OneHasManyEntityWithoutR2UpdateInput
}

input RootWhere {
  id: UUIDCondition
  r: OneHasManyEntityWhere
  and: [RootWhere!]
  or: [RootWhere!]
  not: RootWhere
}

input RootWithoutRUpdateInput {
  _update: Boolean
}

input StringCondition {
  and: [StringCondition!]
  or: [StringCondition!]
  not: StringCondition
  eq: String
  null: Boolean
  notEq: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

scalar UUID

input UUIDCondition {
  and: [UUIDCondition!]
  or: [UUIDCondition!]
  not: UUIDCondition
  eq: UUID
  null: Boolean
  notEq: UUID
  in: [UUID!]
  notIn: [UUID!]
  lt: UUID
  lte: UUID
  gt: UUID
  gte: UUID
}
