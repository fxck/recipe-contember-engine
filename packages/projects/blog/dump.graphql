interface AuthoredInterface {
  id: Int
  body: String
  authorId: Int
}

# Comments on posts
type Comment implements AuthoredInterface {
  id: Int

  # The content of the comment
  body: String

  # Users who liked this comment
  likers: [User]

  # The post that the comment belongs to
  post: Post

  # The user who wrote the comment
  author: User
  authorId: Int
  archived: Boolean
  postId: Int
  createdAt: String
}

type LuckyNumber {
  value: Float
}

# A post from a user
type Post implements AuthoredInterface {
  id: Int

  # The content of the post
  body: String

  # The user that created the post
  author: User
  authorId: Int

  # The comments on this post
  comments: [Comment]

  # The number of comments on this post
  numComments: Int
  archived: Boolean
  createdAt: String
}

# global query object
type Query {
  version: String
  users: [User]
  user(
    # The users ID number
    id: Int!
  ): User
}

# a stem contract account
type User {
  id: Int
  email: String

  # The ID base-64 encoded
  idEncoded: String

  # A user's first and last name
  fullName: String
  fullNameAnotherWay: String

  # A list of Posts the user has written
  posts(
    # Archived posts?
    archived: Boolean
  ): [Post]

  # Comments the user has written on people's posts
  comments: [Comment]

  # Users that this user is following
  following: [User]
  favNums: [Int]

  # How many legs this user has
  numLegs: Int
  luckyNumber: LuckyNumber
  writtenMaterial: [AuthoredInterface]
}

